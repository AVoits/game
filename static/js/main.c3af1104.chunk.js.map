{"version":3,"sources":["ProjectManagementTriangle/textForRange.js","ProjectManagementTriangle/rangesTemplate.js","App.js","serviceWorker.js","index.js"],"names":["textForLabels","cost","time","scope","ExampleApp","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dependentComponent","rangeChange","bind","assertThisInitialized","labelText","inherits","createClass","key","value","currentRange","params","filter","item","currentRangeName","_this2","getComponentsExceptCurrent","randomNextDC","getRandom","setState","prevState","mathAction","nextState","checkedDC","_this3","react_default","a","createElement","WrapperCommon","TitleBlock","Title","Step","RangeBlock","className","Form","SectionTitle","js_default","formatLabel","name","maxValue","max","minValue","min","onChange","getRandomInt","Math","floor","random","React","Component","styled","div","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","form","_templateObject6","span","_templateObject7","App","Root","rangesTemplate_ExampleApp","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3af1104.chunk.js","sourcesContent":["\nconst cost = [\n    'Разорительно',\n    'Очень дорого',\n    'Дорого',\n    'Дороговато',\n    'Выше среднего',\n    'Средняя по рынку',\n    'Ниже среднего',\n    'Дешево',\n    'Почти даром',\n    'Даром',\n];\n\nconst time = [\n    'Слоупок',\n    'Почта России, это ты?',\n    'Черепашка',\n    'Медленно',\n    'Средняя',\n    'Побыстрее',\n    'Шустренько',\n    'Быстро',\n    'Гепард',\n    'Со скоростью света',\n];\n\nconst scope = [\n    'полное г',\n    'Сразу выбросить',\n    'Сойдет',\n    'Есть куда стремиться',\n    'Можно и лучше',\n    'Так себе',\n    'Нормально',\n    'Отлично',\n    'Почти идеально',\n    'Идеально',\n];\n\n\nexport const textForLabels = {\n    cost: cost,\n    time: time,\n    scope: scope,\n};","import React from 'react';\nimport InputRange from 'react-input-range';\nimport styled from 'styled-components';\nimport {textForLabels} from \"./textForRange\";\n\n\nexport class ExampleApp extends React.Component {\n\n    static params = ['cost', 'time', 'scope'];\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cost: 5,\n            time: 5,\n            scope: 5,\n            dependentComponent: null,\n        };\n\n        this.rangeChange = this.rangeChange.bind(this);\n\n        ExampleApp.labelText = ExampleApp.labelText.bind(this);\n\n    }\n\n    static labelText(value, name) {\n        const currentTexts = textForLabels[name];\n        return currentTexts[value - 1];\n    }\n\n\n    static getRandom() {\n       return ExampleApp.getRandomInt(0, 2);\n    }\n\n    static getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n\n    getComponentsExceptCurrent(currentRange) {\n        return ExampleApp.params.filter(item => item !== currentRange);\n    }\n\n\n\n    rangeChange(value, currentRangeName) {\n\n        const params = this.getComponentsExceptCurrent(currentRangeName);\n        const randomNextDC = params[ExampleApp.getRandom()];\n\n\n        this.setState((prevState, props) => {\n\n            const mathAction = prevState[currentRangeName] > value ? 'plus' : 'minus';\n\n            const nextState = {};\n\n            if(mathAction === 'plus') {\n\n                const checkedDC = this.state[randomNextDC] === 10 ?\n                    params.filter(item => item !== randomNextDC)[0] :\n                    randomNextDC;\n\n\n                nextState.dependentComponent = checkedDC;\n\n                nextState[currentRangeName] = value;\n\n                nextState[checkedDC] = this.state[checkedDC] + 1;\n\n            }\n\n            if (mathAction === 'minus') {\n\n                const checkedDC = this.state[randomNextDC] === 1 ?\n                    params.filter(item => item !== randomNextDC)[0] :\n                    randomNextDC;\n\n\n                nextState.dependentComponent = checkedDC;\n\n                nextState[currentRangeName] = value;\n\n                nextState[checkedDC] = this.state[checkedDC] - 1;\n\n            }\n            return nextState;\n        })\n    }\n\n\n    render() {\n        return (\n            <WrapperCommon>\n                <TitleBlock>\n                    <Title>Настрой бухгалтера</Title>\n                    <Step>5/10</Step>\n                </TitleBlock>\n                <RangeBlock className={'project-management-triangle'}>\n                    <Form className=\"form\">\n                        <section className={'scope'}>\n                            <SectionTitle>\n                                <span>Качество</span>\n                                <span>{ExampleApp.labelText(this.state.scope, 'scope')}</span>\n                            </SectionTitle>\n                            <InputRange\n                                formatLabel={() => ''}\n                                name={'scope'}\n                                maxValue={this.props.max}\n                                minValue={this.props.min}\n                                value={this.state.scope}\n                                onChange={value => this.rangeChange(value, 'scope')}/>\n                        </section>\n                        <section className={'cost'}>\n                            <SectionTitle>\n                                <span>Выгода</span>\n                                <span>{ExampleApp.labelText(this.state.cost, 'cost')}</span>\n                            </SectionTitle>\n                            <InputRange\n                                formatLabel={() => ''}\n                                name={'cost'}\n                                maxValue={this.props.max}\n                                minValue={this.props.min}\n                                value={this.state.cost}\n                                onChange={value => this.rangeChange(value, 'cost')}/>\n\n                        </section>\n                        <section className={'time'}>\n                            <SectionTitle>\n                                <span>Скорость</span>\n                                <span>{ExampleApp.labelText(this.state.time, 'time')}</span>\n                            </SectionTitle>\n                            <InputRange\n                                formatLabel={() => ''}\n                                name={'time'}\n                                maxValue={this.props.max}\n                                minValue={this.props.min}\n                                value={this.state.time}\n                                onChange={value => this.rangeChange(value, 'time')}/>\n                        </section>\n                    </Form>\n                </RangeBlock>\n            </WrapperCommon>\n        );\n    }\n\n}\n\n\nconst WrapperCommon = styled.div`\n  width: 100%;\n  max-width: 600px;\n  margin: 0 auto;\n  font-family: 'Raleway', sans-serif;\n`;\n\n\nconst TitleBlock = styled.div`\n  font-size: 24px;\n  font-weight: 500;\n  color: #4f4f4f;\n  margin: 24px 16px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n    width: 30%;\n`;\n\nconst Step = styled.div`\n    \n`;\n\nconst RangeBlock = styled.div`\n  margin: 16px;\n  border-radius: 10px;\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.08);\n  background-color: #ffffff;\n`;\n\n\nconst Form = styled.form`\n    width: 80%;\n    margin: 0 auto;\n`;\n\n\nconst SectionTitle = styled.span`\n    color: #4f4f4f;\n    display: flex;\n    justify-content: space-between;\n    \n    span:first-of-type {\n        opacity: 0.5;\n    }\n`;\n\n\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport {ExampleApp} from \"./ProjectManagementTriangle/rangesTemplate\";\n\nimport './ProjectManagementTriangle/range.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <Root className=\"App\">\n          <ExampleApp min={1} max={10}/>\n      </Root>\n    );\n  }\n}\n\nconst Root = styled.div`\n    * {\n        box-sizing: border-box;\n    }\n`;\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}